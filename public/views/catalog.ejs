<!DOCTYPE html>
<html lang="en">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="/styles/catalog.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="stylesheet"
      href="https://cdn-uicons.flaticon.com/2.1.0/uicons-bold-rounded/css/uicons-bold-rounded.css"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Nunito:wght@700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn-uicons.flaticon.com/2.1.0/uicons-regular-rounded/css/uicons-regular-rounded.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/jwt-decode@3.1.2/dist/index.min.js"></script>
    <title>Каталог</title>
    <style>
      .dropdown {
        position: fixed;
        bottom: 20px;
        left: 20px;
        display: inline-block;
      }

      .dropdown-content {
        display: none;
        position: absolute;
        background-color: #e8e8e8;
        min-width: 160px;
        overflow: auto;
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.4);
        border: 1px solid #888;
        z-index: 1;
        bottom: 70px;
        right: -218px;
        height: 0;
        width: 300px;
        border-radius: 5px 15px 15px 0px;
        transition: 0.3s; /* изменено на max-height */
      }

      .show {
        display: block;
        height: 450px; /* изменено на max-height */
        transition: 0.3s; /* изменено на max-height */
      }

      .dropbtn {
        background-color: #ffffff;
        color: rgb(83, 83, 83);
        padding: 15px;
        font-size: xx-large;
        border: none;
        cursor: pointer;
        transition: 0.3s;
      }

      .dropbtn:hover {
        transform: scale(1.1);
        transition: 0.3s;
        color: rgba(0, 0, 0);
      }

      /* .dropbtn:hover,
      .dropbtn:focused {
        transition: 0.3s;
        background-color: #5f5f5f;
        color: white;
        border-radius: 0px 0px 35px 35px;
      } */

      .buttonDropFocus {
        transition: 0.3s;
        background-color: #5f5f5f;
        color: white;
        border-radius: 0px 0px 35px 35px;
      }

      .delete-button {
        width: 100px;
        left: 0;
        background-color: #ff4d4d; /* Цвет фона кнопки удаления */
        color: #fff; /* Цвет текста кнопки удаления */
        padding: 10px 15px; /* Внутренние отступы кнопки удаления */
        border: none; /* Убираем границу кнопки удаления */
        cursor: pointer; /* Изменяем указатель при наведении на кнопку удаления */
        border-radius: 5px; /* Закругляем углы кнопки удаления */
        transition: 0.3s;
        margin-bottom: 5px;
      }

      .delete-button:hover {
        transition: 0.3s;
        background-color: #cc0000; /* Измененный цвет фона при наведении на кнопку удаления */
      }

      /* Скрытие кнопки удаления для обычных пользователей */
      .user .delete-button {
        display: none;
      }
    </style>
  </head>

  <body>
    <div id="topMenu">
      <div>
        <a href="mainpage">Главная</a>
        <a href="catalog">Каталог</a>
      </div>
      <a href="profile">Профиль</a>
    </div>

    <div id="modelsList"></div>
    <div class="dropdown">
      <button onclick="myFunction()" class="dropbtn" id="dropbutn">
        <i class="fi fi-rr-filter"></i>
      </button>
      <div id="myDropdown" class="dropdown-content">
        <input
          type="text"
          id="searchTerm"
          placeholder="Введите название модели"
        />
        <button onclick="searchModels()">Поиск</button>

        <!-- Контейнер для отображения результатов поиска -->
        <div id="searchResults"></div>
      </div>
    </div>

    <a href="#" class="admin-only" title="Добавить модель"
      ><i class="fi fi-br-plus"></i
    ></a>

    <div id="modal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <form id="addModelForm">
          <div class="labelAndInput">
            <label for="modelName">Название модели:</label>
            <input type="text" id="modelName" name="modelName" required />
          </div>
          <div class="labelAndInput">
            <label for="quantity">Количество на складе:</label>
            <input type="text" id="quantity" name="quantity" required />
          </div>
          <div class="labelAndInput">
            <label for="price">Цена:</label>
            <input type="text" id="price" name="price" required />
          </div>
          <div class="labelAndInput">
            <label for="cleaningTime">Время уборки:</label>
            <input type="text" id="cleaningTime" name="cleaningTime" required />
          </div>
          <div class="labelAndInput">
            <label for="releaseDate">Полная дата выхода:</label>
            <input type="text" id="releaseDate" name="releaseDate" required />
          </div>
          <div class="labelAndInput">
            <label for="weight">Вес кг:</label>
            <input type="text" id="weight" name="weight" required />
          </div>
          <div class="labelAndInput">
            <label for="imageUrl">Ссылка на изображение:</label>
            <input type="text" id="imageUrl" name="imageUrl" required />
          </div>
          <div class="labelAndInput">
            <label for="manufacturer">Производитель:</label>
            <select id="manufacturer" name="manufacturer" required></select>
          </div>
          <div class="labelAndInput">
            <label for="vacuumType">Тип пылесоса:</label>
            <select id="vacuumType" name="vacuumType" required></select>
          </div>
          <!-- Добавьте другие поля формы -->

          <button class="closeForm" type="submit">Добавить модель</button>
        </form>
      </div>
    </div>

    <!-- <script src="/scripts/catalog.js"></script> -->

    <script>
      const displayRoboticVacuums = () => {
        fetch("/models")
          .then((response) => response.json())
          .then((data) => {
            const modelsList = document.getElementById("modelsList");
            modelsList.innerHTML = "";

            data.forEach((model) => {
              const productDiv = document.createElement("div");
              productDiv.className = "product";
              productDiv.id = `model-${model.model_id}`;
              productDiv.innerHTML = `
                <img src="${model.image_url}" alt="${model.ModelName}" class="product-image">
                <div class="product-info">
                  <h3>Робот-пылесос ${model.VacuumTypeName} ${model.ModelName}</h3>
                  <p>Производитель: ${model.ManufacturerName}</p>
                  <p>В наличии: ${model.quantity} Ед</p>
                  <p>Вес: ${model.weight} Кг</p>
                  
                  <div class="price-and-button">
                    <p>Цена: ${model.price} Руб</p>
                    <div>
                      <button class="delete-button" id="delete-${model.model_id}">Удалить</button>
                      <a href="product?id=${model.model_id}" class="button28">Купить сейчас</a>
                    </div>
                </div>
              `;
              modelsList.appendChild(productDiv);
              const deleteButton = document.getElementById(
                `delete-${model.model_id}`
              );
              deleteButton.addEventListener("click", () =>
                deleteModel(model.model_id)
              );
            });
          })
          .catch((error) => console.error("Ошибка получения данных:", error));
      };

      document.addEventListener("DOMContentLoaded", displayRoboticVacuums);

      // Открывает модальное окно
      function openModal() {
        const modal = document.getElementById("modal");
        modal.style.display = "flex";
      }

      // Закрывает модальное окно
      function closeModal() {
        const modal = document.getElementById("modal");
        modal.style.display = "none";
      }

      document.addEventListener("DOMContentLoaded", () => {
        const storedToken = localStorage.getItem("token");

        if (storedToken) {
          console.log("Токен:", storedToken);

          // Раскодируем токен, чтобы получить данные пользователя
          try {
            const decodedToken = JSON.parse(atob(storedToken.split(".")[1]));
            if (decodedToken && decodedToken.login === "admin") {
              const adminOnlyLinks = document.querySelectorAll(".admin-only");
              adminOnlyLinks.forEach((link) => {
                link.style.display = "block";
                link.addEventListener("click", openModal);
              });

              // Закрытие модального окна при клике на крестик
              const closeButton = document.querySelector(".close");
              closeButton.addEventListener("click", closeModal);
            }
          } catch (error) {
            console.error("Ошибка при декодировании токена:", error);
          }
        } else {
          console.log("Токен не найден в локальном хранилище.");
        }
      });

      document.addEventListener("DOMContentLoaded", () => {
        const storedToken = localStorage.getItem("token");

        if (storedToken) {
          console.log("Токен:", storedToken);

          // Раскодируем токен, чтобы получить данные пользователя
          try {
            const decodedToken = JSON.parse(atob(storedToken.split(".")[1]));
            if (decodedToken && decodedToken.login === "admin") {
              document.documentElement.classList.add("admin");
            } else {
              // Если пользователь не администратор, добавляем класс "user"
              document.documentElement.classList.add("user");
            }
          } catch (error) {
            console.error("Ошибка при декодировании токена:", error);
          }
        } else {
          console.log("Токен не найден в локальном хранилище.");
        }
      });

      document.addEventListener("DOMContentLoaded", async () => {
        // Заполнение выпадающих списков производителей и типов пылесосов
        const manufacturerSelect = document.getElementById("manufacturer");
        const vacuumTypeSelect = document.getElementById("vacuumType");

        try {
          // Получение списка производителей
          const manufacturersResponse = await fetch("/getManufacturers");
          const manufacturersData = await manufacturersResponse.json();

          // Заполнение выпадающего списка производителей
          manufacturersData.forEach((manufacturer) => {
            const option = document.createElement("option");
            option.value = manufacturer.manufacturer_id;
            option.textContent = manufacturer.name;
            manufacturerSelect.appendChild(option);
          });

          // Получение списка типов пылесосов
          const vacuumTypesResponse = await fetch("/getVacuumTypes");
          const vacuumTypesData = await vacuumTypesResponse.json();

          // Заполнение выпадающего списка типов пылесосов
          vacuumTypesData.forEach((vacuumType) => {
            const option = document.createElement("option");
            option.value = vacuumType.type_id;
            option.textContent = vacuumType.type_name;
            vacuumTypeSelect.appendChild(option);
          });
        } catch (error) {
          console.error(
            "Ошибка при получении данных для выпадающих списков:",
            error
          );
        }

        // Добавление обработчика для формы добавления модели
        const addModelForm = document.getElementById("addModelForm");

        addModelForm.addEventListener("submit", async (event) => {
          event.preventDefault();

          const modelName = document.getElementById("modelName").value;
          const manufacturerId = manufacturerSelect.value;
          const typeId = vacuumTypeSelect.value;
          const quantity = document.getElementById("quantity").value;
          const price = document.getElementById("price").value;
          const cleaningTime = document.getElementById("cleaningTime").value;
          const releaseDate = document.getElementById("releaseDate").value;
          const weight = document.getElementById("weight").value;
          const imageUrl = document.getElementById("imageUrl").value;
          console.log(modelName, manufacturerId, typeId, weight);
          const requestData = {
            modelName,
            manufacturerId,
            typeId,
            quantity,
            price,
            cleaningTime,
            releaseDate,
            weight,
            imageUrl,
          };
          console.log(requestData);
          try {
            const response = await fetch("/addModel", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(requestData),
            });

            if (response.ok) {
              console.log("Модель успешно добавлена.");
              // Добавьте здесь код для закрытия модального окна или других действий по вашему выбору
            } else {
              console.error("Ошибка при добавлении модели:", response.status);
            }
          } catch (error) {
            console.error("Ошибка при отправке запроса:", error);
          }
        });
      });

      function myFunction() {
        const dropdown = document.getElementById("myDropdown");
        const dropbtn = document.getElementById("dropbutn");

        dropdown.classList.toggle("show");

        if (dropdown.classList.contains("show")) {
          dropbtn.classList.add("buttonDropFocus");
        } else {
          dropbtn.classList.remove("buttonDropFocus");
        }
      }

      async function deleteModel(modelId) {
        try {
          const response = await fetch(`/deleteModel/${modelId}`, {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          });

          if (response.ok) {
            console.log(`Модель с ID ${modelId} успешно удалена.`);
            // Можете добавить дополнительные действия после удаления, если необходимо
            // Например, обновить список моделей, чтобы отразить удаление на странице
            displayRoboticVacuums();
          } else {
            console.log(modelId);
            location.reload(true);
            console.error("Ошибка при удалении модели:", response.status);
          }
        } catch (error) {
          console.error("Ошибка при отправке запроса на удаление:", error);
        }
      }

      async function searchModels() {
        const searchTerm = document.getElementById("searchTerm").value;
        const response = await fetch("/searchModels", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ searchTerm }),
        });

        if (response.ok) {
          const results = await response.json();
          displayResults(results);
        } else {
          console.error(
            "Ошибка при выполнении запроса на сервер:",
            response.status
          );
        }
      }

      function displayResults(results) {
        const searchResultsContainer = document.getElementById("searchResults");
        searchResultsContainer.innerHTML = "";

        if (results.length === 0) {
          searchResultsContainer.textContent = "Ничего не найдено.";
        } else {
          const table = document.createElement("table");
          const headerRow = table.createTHead().insertRow();
          headerRow.innerHTML =
            "<th>ID</th><th>Название</th><th>Цена</th><th>Количество</th>";

          const tbody = table.createTBody();
          results.forEach((result) => {
            const row = tbody.insertRow();
            row.innerHTML = `<td>${result.model_id}</td><td>${result.name}</td><td>${result.price}</td><td>${result.quantity}</td>`;
          });

          searchResultsContainer.appendChild(table);
        }
      }
    </script>
  </body>
</html>
